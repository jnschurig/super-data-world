---------------------
-- SCHEMA GAME DDL --
---------------------
-- Event Logging   --
---------------------

-- ************************************** game.entity_status

CREATE TABLE game.entity_status
(
 entity_status_id   integer NOT NULL GENERATED BY DEFAULT AS IDENTITY (
 start 1
 ),
 created_date       timestamp NOT NULL,
 modified_date      timestamp NOT NULL,
 status_name        varchar(100) NOT NULL,
 status_description varchar(500) NULL,
 status_type        varchar(100) NULL,
 CONSTRAINT PK_user_status PRIMARY KEY ( entity_status_id ),
 CONSTRAINT AK_entity_status UNIQUE ( status_name )
);

COMMENT ON TABLE game.entity_status IS 'A comprehensive list of statuses that can be applied to users. Includes occupations';


-- ************************************** game.bot_registration

CREATE TABLE game.bot_registration
(
 bot_registration_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
 created_date        timestamp NOT NULL,
 modified_date       timestamp NOT NULL,
 bot_status_id       integer NOT NULL,
 bot_name            varchar(200) NOT NULL,
 bot_description     varchar(500) NULL,
 authentication_key  varchar(200) NULL,
 CONSTRAINT PK_bot_registration PRIMARY KEY ( bot_registration_id ),
 CONSTRAINT AK_bot_registraton UNIQUE ( bot_name ),
 CONSTRAINT FK_bot_registration_bot_status_id FOREIGN KEY ( bot_status_id ) REFERENCES game.entity_status ( entity_status_id )
);

CREATE INDEX FKidx_bot_registration_bot_status_id ON game.bot_registration
(
 bot_status_id
);


-- ************************************** game.action_type

CREATE TABLE game.action_type
(
 action_type_id      integer NOT NULL GENERATED ALWAYS AS IDENTITY,
 created_date        timestamp NOT NULL,
 modified_date       timestamp NOT NULL,
 action_channel_id   integer NOT NULL,
 action_name         varchar(100) NOT NULL,
 action_description  varchar(1000) NULL,
 current_action_cost integer NULL,
 CONSTRAINT PK_action_type PRIMARY KEY ( action_type_id ),
 CONSTRAINT AK_action_type UNIQUE ( action_name ),
 CONSTRAINT FK_action_type_action_channel_id FOREIGN KEY ( action_channel_id ) REFERENCES game.channel_registration ( channel_registration_id )
);

CREATE INDEX FKidx_action_type_action_channel_id ON game.action_type
(
 action_channel_id
);

COMMENT ON TABLE game.action_type IS 'This table records the types of actions that users can do. This is what displays in twitch. It also records the current cost of said action.';

COMMENT ON COLUMN game.action_type.action_channel_id IS 'The channel for which this action is usable.';


-- ************************************** game.channel_registration

CREATE TABLE game.channel_registration
(
 channel_registration_id integer NOT NULL GENERATED ALWAYS AS IDENTITY (
 start 1
 ),
 created_date            timestamp NOT NULL,
 modified_date           timestamp NOT NULL,
 channel_status_id       integer NOT NULL,
 channel_name            varchar(50) NOT NULL,
 channel_description     varchar(1000) NULL,
 channel_url             varchar(150) NULL,
 CONSTRAINT PK_channel_registration PRIMARY KEY ( channel_registration_id ),
 CONSTRAINT AK_channel_registration UNIQUE ( channel_name ),
 CONSTRAINT FK_channel_registration_channel_status_id FOREIGN KEY ( channel_status_id ) REFERENCES game.entity_status ( entity_status_id )
);

CREATE INDEX FKidx_channel_registration_channel_status_id ON game.channel_registration
(
 channel_status_id
);



-- ************************************** game.player_registration

CREATE TABLE game.player_registration
(
 player_registration_id    integer NOT NULL GENERATED ALWAYS AS IDENTITY,
 created_date              timestamp NOT NULL,
 modified_date             timestamp NOT NULL,
 player_current_status_id  integer NOT NULL,
 registered_via_channel_id integer NOT NULL,
 player_name               varchar(200) NOT NULL,
 is_deleted                integer NULL,
 deleted_date              timestamp NULL,
 CONSTRAINT PK_user_registration PRIMARY KEY ( player_registration_id ),
 CONSTRAINT FK_player_registration_player_current_status_id FOREIGN KEY ( player_current_status_id ) REFERENCES game.entity_status ( entity_status_id ),
 CONSTRAINT FK_player_registration_registered_via_channel_id FOREIGN KEY ( registered_via_channel_id ) REFERENCES game.channel_registration ( channel_registration_id )
);

CREATE INDEX FKidx_player_registration_player_current_status_id ON game.player_registration
(
 player_current_status_id
);

CREATE INDEX FKidx_player_registration_registered_via_channel_id ON game.player_registration
(
 registered_via_channel_id
);

COMMENT ON TABLE game.player_registration IS 'Users are registered here. One record per unique user, sort of. Only one active player per user. There can be N deleted ones. deleted and killed are synonymous.';


-- ************************************** game.entity_action

CREATE TABLE game.entity_action
(
 entity_action_id        integer NOT NULL GENERATED ALWAYS AS IDENTITY (
 start 1
 ),
 created_date            timestamp NOT NULL,
 modified_date           timestamp NOT NULL,
 channel_registration_id integer NOT NULL,
 action_type_id          integer NOT NULL,
 initiating_player_id    integer NOT NULL,
 action_cost             bigint NULL,
 CONSTRAINT PK_user_action PRIMARY KEY ( entity_action_id ),
 CONSTRAINT FK_entity_action_action_type_id FOREIGN KEY ( action_type_id ) REFERENCES game.action_type ( action_type_id ),
 CONSTRAINT FK_entity_action_channel_registration_id FOREIGN KEY ( channel_registration_id ) REFERENCES game.channel_registration ( channel_registration_id ),
 CONSTRAINT FK_entity_action_initiating_player_id FOREIGN KEY ( initiating_player_id ) REFERENCES game.player_registration ( player_registration_id )
);

CREATE INDEX FKidx_entity_action_action_type_id ON game.entity_action
(
 action_type_id
);

CREATE INDEX FKidx_entity_action_channel_registration_id ON game.entity_action
(
 channel_registration_id
);

CREATE INDEX FKidx_entity_action_initiating_player_id ON game.entity_action
(
 initiating_player_id
);

COMMENT ON TABLE game.entity_action IS 'user actions are recorded here. As an insert-only table, an action will be recorded here indicating its successful implementation. Actions may be marked as deleted or statuses altered as necessary.';

